// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/host.proto

/*
Package video_host is a generated protocol buffer package.

It is generated from these files:
	proto/host.proto

It has these top-level messages:
	GetVideoInfoRequest
	GetVideoInfoResponse
	GetVideoRequest
	GetVideoResponse
*/
package video_host

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Host service

type HostClient interface {
	GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...client.CallOption) (*GetVideoInfoResponse, error)
	GetVideo(ctx context.Context, in *GetVideoRequest, opts ...client.CallOption) (*GetVideoResponse, error)
}

type hostClient struct {
	c           client.Client
	serviceName string
}

func NewHostClient(serviceName string, c client.Client) HostClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "video_host"
	}
	return &hostClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *hostClient) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, opts ...client.CallOption) (*GetVideoInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Host.GetVideoInfo", in)
	out := new(GetVideoInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) GetVideo(ctx context.Context, in *GetVideoRequest, opts ...client.CallOption) (*GetVideoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Host.GetVideo", in)
	out := new(GetVideoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Host service

type HostHandler interface {
	GetVideoInfo(context.Context, *GetVideoInfoRequest, *GetVideoInfoResponse) error
	GetVideo(context.Context, *GetVideoRequest, *GetVideoResponse) error
}

func RegisterHostHandler(s server.Server, hdlr HostHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Host{hdlr}, opts...))
}

type Host struct {
	HostHandler
}

func (h *Host) GetVideoInfo(ctx context.Context, in *GetVideoInfoRequest, out *GetVideoInfoResponse) error {
	return h.HostHandler.GetVideoInfo(ctx, in, out)
}

func (h *Host) GetVideo(ctx context.Context, in *GetVideoRequest, out *GetVideoResponse) error {
	return h.HostHandler.GetVideo(ctx, in, out)
}
